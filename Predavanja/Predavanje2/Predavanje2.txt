Datatoečni vhid/izhod

Sistemski klici:
 - open -> odpre datoteko
 - close -> zapre datoteko
 - read -> za branje datoteke
 - (l)seek -> iskanje po datoteki; premaknemo
   se na poljubno mesto
Teti sisteski klici so direktni, torej nebufferiran V/iskanje
Kaj je razlika med write in printf:
    - printf je funkcija iz knjižnice, ki uporabi
      sistemski klic write (ima pa še dodatne zadeve).
      Običajno ima še en buffer, kamor shranjuje podatke,
      omogoča še dodatne zadeve. Naved write zna izpisovat
      samo znake.
    - write je pa osnoven sistemski klic.
Buffer je medpomnilmik v katerega se začasno shranjujejo podatki.
Ni rečeno, da se podatki takoj izpišejo, možmo je, da so nekaj časa
v tem bufferju npr. v bufferju bojo tolk dolgo, dokler ne pritisnemo
enter.
Če je pa nebufferiran se pa takoj izpiše, torej takoj gre na izhod.
Vsak sisteski klic se izvede v jedru.
Te funkcije niso del standardnega ANIS C, ampak POSIX.
POSIX oz. portable opertaing system inteface.

Vsaka datoteka, ki je odprta ima svoj datotečni opisnik oz. file descritor:
 - za vsako odprto datoteko je en ta.
 - če datoteka ni odprta, seveda tega nima.
 - datotečni opisnik je ne negativno celo število npr. 0, 1, 2 ...
 - ko se datoteko odpre ji je dodeljen prvi prosti datotečni descritor.
 - zakaj jih pa uporabljamo? Ker je to bolj očinkovito.
Imamo tudi nekaj vnaprej določenih datotoečni opisnikov:
    • Standardni vhod (standard input)
        - Opisnik STDIN_FILENO: običajno 0 (nikjer sicer ne piše, da mora biti 0)
    • Standardni izhod (standard output)
        - Opisnik STDOUT_FILENO: običajno 1
    • Standardni izhod za napake (standard error)
        - Opisnik STDERR_FILENO: običajno 2
        - Posebna vrsta STDIN.
        - Ta se uporablja zato, ker želimo, da se napaka hitreje izpiše kot
          navaden izhod.
Nizi v C se ponavadi poda kot kazalec na prvo črko niza. Nizi se zaključujejo s \0 kar je 0 v ASCII.

open ima mode, ki so dostopna dovoljenja. Ta so pomembna, če kreiramo novo datoteko.
oflag je funkcija ali določene konstante, ki so definirane v <fcntl.h>
Obvezne konstante (teh 5 se izključuje - lahko je samo
ena):
    • O_RDONLY (običajno ima vrednost 0) --> 0000
    • O_WRONLY (običajno ima vrednost 1) --> 0001
    • O_RDWR (običajno ima vrednost 2)   --> 0010
    • O_EXEC: samo za izvrševanje (execute only)
    • O_SEARCH: dovoljenja za iskanje (velja za direktorije)
<fcntl.h> oz. file-control.
Imamo tudi opcijske kontante:
    • O_APPEND: pisanje na konec datoteke
    • O_CREAT: če datoteka še ne obstaja, se ustvari. Če že obstaja se ne kreira.
    • v tem primeru je nujno navesti mode, ki vsebuje dostopne dovolilne
      bite; pri odsotnosti O_CREAT se mode ignorira
    • O_DIRECTORY: generira napako, če se pot ne nanaša na direktorij
    • O_EXCL: generira napako, če je naveden tudi O_CREAT in
      datoteka že obstaja (tj., proces jo hoče ustvariti sam)
    • O_NONBLOCK: ne-blokirajoč način, če gre za FIFO ali posebno
      datoteko (za gonilnike).
    • O_TRUNC: odreže (truncate) datoteko na velikost 0 (pri pisanju)
    • O_SYNC: pri pisanju se čaka, da se I/O dejansko fizično izvede
    ^ Zaradi nekega razloga se teti definirani v osmiškem sistemu.
    ^ Odvisno od pozicije bitov je katero konstate je.
    Če želimo uporabiti write only in append uporabimo operacijo OR:
        000001 O_WRONLY
     OR 10...0 O_APPEND
        _______
        100001 --> rata zdej kombinacija teh dveh
[username in password (za virtualko): student]
find /usr/include -name fcntl.h <-- je uporaben ukaz za iskanje datotek.
grep -r (za rekurzivno) "O_WRONLY" /usr/include/*.h <-- omogoča iskanje v datotekah posamezen niz

Funkcija close datoteko zapre. Ko se proces konča, torej program se vse datoteko
avtomatsko zaprejo. Nekateri programi to izkoristijo in ne zapirajo datotek. To ni
najboljša ideja, zapiranje datoteke tudi sprosti kakršenkoli zaklep, ki ga
lahko ima proces na datoteki.

Funkcija read:
    - sistemski klic read(int fd (file desc. od open),
                          void *buff (kazalec na buffer; tipično bo char, ni pa nujno),
                          size_t nbytes (koliko bajtov bomo prebrali; običjano je to long int));
    - (podatkovni tip) vrne ssize_t (gre si SINGED size_t; signed je zato, da lahko vrne neg. vrednost, kar pomeni, da gre za napako).
    - vrne število prebraniih bajtov.
    - lahko vrne 0 (EOF), če gre za konec datoteke
    - lahko vrne -1 za napako.
    - podamo število željenih prebranih bajtov, zato da ne presežemo buffer.
    - koliko bajtov naj se prebere je ponavadi kar enako velikosti bufferja (NIKOLI VEČJE OD BUFFERJA!)
    - bere od trenutnega odmika naprej
    - file v buffer

Funkcija write:
    - buffer v datoteko
    - write(int fd (file desc. od open), 
            const void *buff (ta buffer je zdej read only),
            size_t nbytes (koliko bajtov želimo zapisat));
    - vrne ssize_t iz enakega razloga.
    - piše od trenutnega odmika naprej.
    - če gre za append opcijo, potem predenj začne pisat gre
      avtomatsko do konca datoteke in od tam naprej pisal.
    - običajno se preverja, če jih je zapisal toliko bajtov kolikor
      smo želeli. Če jih ni, sprožimo napako.

[CTRL + d = EOF (end of file)]

Lovjenjen napak:
    if (fun(...) == x) {
        printf("Napaka\n");
        exit(1);
    }
    ^ to lahko naredimo na več načinov npr. funkcijo al macro
    printf() --> fprintf() piše v STDERR, kar je boljše za napake.
    ˇ
    #define err(msg) {fprintf(STDERR, "Napaka: %s\n", ); exit(1);}
    npr. if (neki() != n) {
            err("Tole ne dela")
         }

Funkcija lseek:
    - določa odmik
    - lseek(int fd (od open file desc.),
            off_t offset,
            int whence (lahko je SEEK_SET, SEEK_CUR, SEEK_END));
    - vrne podatek tipa off_t
    - trenutni odmik:
        lseek(fd, 0, SEEK_CUR); --> koliko je trenuten odmik
    - če je odmik večji od same datoteke, potem se v datoteki naredi "luknja"
    int fd;
    if ((fd = open("file.hole", O_CREAT | O_WRONLY | O_TRUNC, 0666)) < 0) {
        err("Open error")
    }
    char buff1[] = "abcdefghij";
    if (write(fd, buff1, 10) != 10) {
        err("Buff1 write)
    }
    if (lseek(fd, 40, SEEK_SET) < 0) {
        err("Napaka lseek");
    }
    V ustvarjeno luknjo se ustvarijo sami "\0"

Jedro ima 3 strukture, ki se tičejo datotek:
    1. Tabela procesov -> vsi procesi, ki tečejo na sistemu
       Vnos v tej tabeli:
            fd0, fd1, fd2, fd3 ...
            zastavice teh opisnikov
            kazalci na datoteke
    2. Datotečna tabela (file table) -> posamezen vnos v tej
       tabeli, se nananša na eno datoteko. Imajo tudi zastavice za
       se beleži status datoteke, trenutni odmik in kazalec na vnode.
    3. Struktura vnode -> vsaka odrta datoteja vsebuje takšno datoteko.
       Vsebuje iNode (meta podatki o datoteki) (Struktura, ki opisuje vse razen imena ter vsebine)
       Slika na prostojnici št. 25
    Kaj pa če imata dva procesa odprta enako datoteko?
        Slika na prostojnici št. 26
        Oba kažeta na isti vnode, ki pa kaže na iNode.
        Različno je to, da imata različen trenutni odmik.
        