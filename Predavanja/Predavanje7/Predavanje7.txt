Funkciji popen in pclose:
    popen(ukaz za izvedit, read/write):
    type je dve možnosti:
        - read (start bere od otroka) -> "r"
        - write (starš piše) -> "w"
        naredit pipe, fork, duplicira deskriptor
    pclose():
        zapiranje cevi

FIFO:
    Tudi named pipe (poimenovana cev). Ustreza ji neka datoteka, ki se obnaša
    kot ta cev (ta datoteka predstavlja to cev).
    Prednosti pred cevi:
        - ni potrebno sorodstvo
        - komunikacija deluje v obe smer
    FIFO ustvarimo z mkfifo:
        int mkfifo(const char *pathname (katera datoteka), mode_t mode (je enak kot pri funkciji open))
        Vrne 0, če je vse OK, sicer -1.
    Običajno je več pisalcev v FIFO.
    Uporaba FIFO:
        - lupinski ukazi, ki prenašajo podatke brez pisanja v začasne datoteke
        - za aplikacije tipa odjemalec-strežnik.

IPC System V:
    Tudi "inter process communication" System V
    To vsebuje:
        - sporočilne vrste
        - semarofje
        - deljen pomnilnik
    Ko ustvarimo IPC strukturo, moramo podati ključ (key). To si lahko sami izmislimo.
    Lahko jo pa tudi generiramo s nekim programom.
    Oba procesa se morata skicevati na isto strukturo. Načinov je več:
        - nova IPC struktura se vedno ustvari, če je ključ naveden kot
          če je IPC_PRIVATE.
        - procesa se dogovorita za nek poseben ključ
        - procesa se dogovorita za neko ime poti (pathname) in za nek
          integer, funkcija ftok pa iz tega tvori ključ.
    IPC_CREATE -> če struktura še ne obstaja jo ustvari.
    IPC_PRIVATE je poseben ključ, ki vedno ustvari novo
    strukturo.
    Če si izberemo pojuben (še neuporabljen) ključ, je treba
    pri ustvarjanju strukture postaviti zastavico IPC_CREAT,
    ki strukturo ustvari, če še ne obstaja.

    Strukutra za dostopna dovoljenja:
    

Sporočilna vrsta:
    Je povezan seznam (linked list).
    el -> el -> el
    Je shranjen v jedru.
    Ima struktura, ki se nanaša nato, vendar je ne uporabljamo neposredno.

Funkcija msgget:
    Ta funkcija ustvari ali odpre obstoječo sporočilno vrsto.
    Podamo ključ.
    int msgget(key (lahko ga generiramo (uporabi ftok), ali izmislimo), flag)
    Vrne ID sporočilne vrste ali -1 ob napaki.
    Nahaja se v <sys/msg.h>

Funkcija msgsnd:
    Da pošljemo podatke v vrsto, uporabimo to funkcijo.
    int msgsnd(msqid (tist ID, ki ga vrne msgget),
               const void *ptr (kazalec na buffer).
               size_t nbytes (koliko bajtov),
               int flag)
    Vrne 0, sicer -1 ob napaki.
    Sporočilo sestavlja:
        - polje
        - dolžino
        - podatkovni bajti
    Sporočilo se vedno da na konec vrste.
    Ptr je kazalec na strukturo, ki vsebuje tip in podakte:
        struct mymesg {
            long mtype;
            char mtext[512]; /* podatki dolžine nbytes */
    }
    Navedemo tip, da se lahko sporočila ločijo med sabo.

    Flag je lahko 0 (če je 0 potem msgsnd blokira npr. če ni prostora za sproročila ali je vrsta bila
    odstranjena iz sistema ...) ali IPC_NOWAIT (če je to nastavljeno npr. če je vrsta polna potem povzroči, da msgnsd vrne
    takoj z napako EAGAIN).

    Potrebujemo <sys/ipc.h> za strukture.
    Strukturo je potrebno deklarirati.

Funkcija msgrcv:
    int msqrcv(int msqid (isti ID, ki ga vrne msgget),
     void *ptr (kaže na msgsnd),
     size_t nbytes (velikost bufferja mText; pri msqrvc),
     long type,
     int flag);
    
    Type je lahko:
        • type == 0: dobimo prvo sporočilo v vrsti
        • type > 0: dobimo prvo sporočilo v vrsti, katerega tip je
          type
        • type < 0: dobimo prvo sporočilo v vrsti, katerega tip je
          najnižja vrednost, ki je manjša ali enaka absolutni vrednosti
          type

Kako odstranimo vrsto iz sistema?
    Funkcija int msgctl(int msqid (ID, ki ga vrne msgget),
                        int cmd (določa ukaz),
                        struct msqid_ds *buf (uporablja samo za to, da se shrani v nek buffer, sicer tega ne rabimo
                        in je lahko NULL pointer));
    cmd je lahko:
        - IPC_RMID -> odstrani sporočilno vrsto iz sistema
        - IPC_STAT -> strukturo msqid_ds shrani v buffer
        - še druge zadeve ... 

Semafor:
    Je štecec, ki se uporablja za dostop do nekega objekta (vira)
    s strani dveh ali več procesov.
    Da dobi vir, mora biti proces sposoben:
        • testirati semafor
        • če je vrednost semaforja pozitivna, lahko uporabi vir. Proces
          dekrementira semafor.
        • če je vrednost semaforja 0, proces čaka, dokler ni vrednost večja od 0.
          Ko se zbudi, gre v točko 1.
    Semaforji so narejeni v jedru, zato, da so atomični (nedeljiva operacija).

    Enostaven semafor je binarni -> nadzoruje samo en vir.

    Za vsak semafor pa imamo strukturo sem:
        struct sem {
            unsigned short semval; // vrednost semaforja
            pid_t sempid; // pid za zadnjo operacijo
            unsigned short semncnt; // # procesov, ki čakajo na
                                        // povečanje vrednosti
            unsigned short semzcnt; // # procesov, ki čakajo na 0
        };

Funkcija semget:
    Množico semamaforjev ustavrimo s semget.
    int semget(key_t key (dobimo s ftok() ali izmislimo),
               int nsems (koliko semaforjev; npr. 1),
               int flag);
    Vrne ID semaforja, če je vse OK, sicer -1 ob napaki.

Funkcija semctl:
    Izvaja razne opercije nad semaforjem.
    int semctl(int semid (ID semaforja),
               int semnum (0, če je eden),
               int cmd);
    Unija semun:
        union semun {
            int val; // za SETVAL vrednost semaforja
            struct semid_ds *buf; // za IPC_STAT in IPC_SET
            unsigned short *array; // za GETALL in SETALL
        };
    Ker je unija, je njena velikost enaka velikost največjega elementa, ki ga vsebuje.
    Hkrati lahko hrani le eno od teg vrednosti. V danem
    trenuntku se uporablja samo en član unije.
    
Funkcija semop:
    Ta funkcija izvaja operacije na množici semaforjev.
    int semop(int semid, struct sembuf semoparray[],
              size_t nops);
    • semoparray je kazalec na polje semaforskih operacij
    • nops je število operacij (elementov) v polju.
    • Struktura sembuf:
        struct sembuf {
        unsigned short sem_num; /* št. semaforja */
        short sem_op; /* operacija */
        short sem_flg; /* IPC_NOWAIT, SEM_UNDO */
      };


    



    