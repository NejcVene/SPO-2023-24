Deljeni/skupni pomnilnik (shared memory)
    To je vrsta hitre komunikacije (hitreje od sporočilne vste).
    Težava je v sinhronizaciji, sploh med procesi.
    V ta namen lahko uporabimo semafor, ključavnice (mutex) ...

Funkcija shmget
    #include <sys/ipc.h>
    #include <sys/shm.h>
    int shmget(key_t key (ftok ali ga izmislimo),
               int size (velikost pomnilnika v bajtih),
               int flag (zastavice))
    Ustvari ta skupni pomnilnik.
    Če imamo obstoječ segment (že obstaja), damo size na 0.
    ^ zakaj bi še enkrat zasedel prostor, če že obstaja?
    flag:
        - dostopna dovoljenja npr. 0644
        - IPC_CREAT
    Vrne nam ID (shmID). Je int, ki pove število te vrste.
    Če nam vrne -1 je napaka.

Funkcija shmctl:
    int shmctl(int shmID (tisto kar shmget vrne),
               int cmd (ukaz, ki se bo izvedel),
               struct smdid_ds *buf (tega mi ne bomo uporabljali))
    cmd:
        - IPC_RMID -> ne rabi kazalca na tisto strukturo in damo lahko NULL; odstrani segment

Funkciji shmat in shmdt
    Priklop na segment deljenega pomnilnika:
        void *shmat(int shmID,
              void *addr (na pomnilnik),
              int flag (zastavice))
        Če je vse vredu vrne kazalec na ta segment. Če je kej narobe
        vrne NULL kazalec.
        addr:
            - ni mus da mi zberemo. Lahko napišemo kar 0 in bo jedro našel ustrezno lokacijo.
            - more bit (void *) 0, da jedro vrne naslov
        flag:
            - SHM_RDONLY -> segmetn se priklopi le za branje, sicer je branje IN pisanje
    Proces se odklopi s shmdt:
        int shmdt(void *addr (naslov))
        Vrne int, ki pove če je OK ali ne (-1).

==========================================================================================================

Niti
    Kadar se le da, uporabimo niti, ker so bolj učinkovite.
    Vendar to se ne da vedno npr. so že obstoječi programi, ni na istem sistemu ...
    Večnitnost je način, ki imamo lahko znotraj enega procesa več niti.
    Izkoristimo paralelizem.
    Predenj se je večnitnost pojavila, so programi imeli le eno nit:
        Nit - thread (of execution)
        Včasih so imeli proizvajalci različne verzije niti, nato so pa nastli
        standardi npr. pthreads (POSIX threads)

Razlika med procesi in niti
    Proces je program, ki se izvaja. Ustvari ga OS. Proces vključuje ne kup reči
    npr. id, direktorij, ukazi programa, skalad, dispozicije signalov, knjižnice, orodja ...
    Veliko je režije.
    Nit je veliko lažja (ima manj režije). Je najmanjše zaporednje ukazov, ki se ga da neodvisno izvajat.
    Proces ima lahko eno ali več niti. V osnovi je samo ena, lahko jih pa naredimo več.
    Nit obstaja znotraj procesa in uporablja njegove vire.
    Nit se konča takrat, ko se konča start, sicer se lahko konča tudi prej.
    Niti si deliju skupen pomn. prostor. Če se nekaj spremeni, potem druge niti tudi vidijo to spremembo.
    Za nit moramo sami poskrbeti za sinhornizacijo.

Ustvarjanje niti:
    #include <pthread.h>
    int ptherad_create(pthread_t *tidp (kazalec na nit; thread ID),
                       const phtread_attr_t *attr (lastnosti niti; atributni objekt),
                       void * (*start_routine) (void*) (to je kazalec na funkcijo; to funkcijo potem nit izvaja),
                       void *arg (parametri));
    Vrne 0, če je OK, sicer neke zastavice.
    atributni objekt:
        - če je to NULL bodo privzete vrednosti.
    arg:
        - če ni argumenta je to NULL
        - sicer je lahko tipa npr. int, long ...

Kako vemo, kdaj bo nit se šla izvajat in na katerem CPU?
    To ne moremo ravno vedeti. Ne moremo dodeliti niti na specifična jedra.
    Lokalne implementacije to omogočajo, vendar koda ni prenoslijva po sistemi.
    V večini primerov nas pa to niti ne zanima, niti ni pomembno.

Kako se nit konča?
    Imamo več načinov:
        - vrne iz svoje procedure
        - lahko kliče funkcijo:
            void ptherad_exit(vodi  *retval). Če main tole uporabi
            proces obstaja, dokler se niti ne končajo.
        - če se main konča, se končajo tudi niti.
        - če ni kliče exit() se konča celoten proces (niti tipično tega ne smejo klicati oz. uporabljati)
        - če ena od niti dobi signal, ki ima za privzeto akcijo, da proces konča, se konča celoten proces
          in ne samo ena nit.

Združevanje in ločevaje niti:
    ptherad_join čaka na nit, da se konča in pridobi njen izhodni status.
    Združevanje je način sinhronizacije med niti.
    Tista nit, ki kliče join blokira, dokler se navedena nit ne konča.
          