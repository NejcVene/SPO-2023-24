Procesi, ki imajo odprte datoteke:
    Inode so vse informacije o datoteki, razen imena
    ter vsebine (skoraj vsi metapodatki).
    Če imata dva procesa odprta isto datoteko imata vsaka svoj
    odmik (tako zagotovimo različne vnose npr. eden lahko bere, drugi lahko bere in piše).

Atomične operacije:
    Atomska operacija - imamo proces, ki bi dal nekaj na koncu datoteke
        nekoč: smo odpri datoteko s open, šel do konca datoteke s lseek(fd, 0, SEEK_END)
               in nato uporabili write(fd, ...)
               Težava v tem je, da nimamo zagotovila, da se bosta ta dva ukaza
               izvedla tako, da se vmes ne bo zgodilo nič drugega. Vemo, da se procesi
               menjajo med seboj in lahko se zgodi, da se izvede seek in nato pride
               do contex switch (mejave konteksta) in se drugi program gre izvajat. Šele nato
               po tem drugem programu se izvede write od prvega. Kaj bi se sedaj
               zgodilo, če bi drugi porgram tudi delal kaj v tej datoteki - možno bi bilo
               da bi datoteka ratala večja in posledično prvi program ne bi več imel
               pravilnega odmika (prej si je zapomnil, da kaže na konec, vedar se je zaradi
               spremembe v datoteki da zamaknil in ne kaže več na konec).
               Torej moramo zagotoviti da se izvede atomsko - da se skupaj
               izvede.
        Atomski (zdaj): open omogoča opcijo O_APPEND in po write(fd, ...) bo šel na konec
        datoteke. Write se bo izvedel tako, da bo upošteval O_APPEND in se še nekrat
        premaknil na konec - gre na trenutni konec datoteke, tudi če se je ta vsem zaradi
        contex switcha spremenila.

dup in dup2 (podvojitev opsinika):
    Duplicira nam datotekčni opisnik
    int dup(int fd).
    Vrne novi opsinik oz. novi file descriptor (fd).
    dup2 nam pa omogoča, da sami navedemo kateri bo novi fd npr. 25
    dup2(int fd, int fd2).
    Zakaj bi pa sploh podvajali opisnike?
        ls -l file nofile > tmp1

Funkcija fcntl:
    Dela neko kontrolo, kar je odvinso od ukaza, ki se izvaja.
    Spremeni lastnosti datoteke, ki je že odprta
    Lahko podovji opsinik, pridobivanje zastavic opsinika, nastaljenaje
    zastavic ...
    int fcntl(fd, cmd)
    CMD je lahko:
        F_GETFL -> za get flags; vrne kot vrednost funkcije zastavice statusa datoteke.
    
    ./getfl1 3 (3 je fd)
    argv[0] = getftl1
    argv[1] = 3
    atoi() prevede niz v število.
    Vrne val, ki vsebuje različne bite (O_ACCMODE določata samo zadnja dva bita!) - v ta namen
    uporabimo masko (&) -> accmode = val & O_ACCMODE;
    Ostanetejo samo tisti biti, ki določajo O_ACCMODE.

Datoteke in direktoriji
    Datoteka je zaporednje bajtov.
    ls -i -> pove iNode vrednost za datoteko (po iNode se datoteka loči).
    c ->characted device drive
    b -> block device -> ponavadi gre za neke večje količin.
    iNode je strutura, ki vsebuje vse metapodatke o datoteki (razen imena
    in vsebine).
    iNode številka je edinstvena, vendar je to vezano na particijo. Število datotek
    je toliko, kolikor imamo iNode-u na voljo.
    Podatke, na katere označuje Inode se hranijo v posebni
    struktri, in sicer Struktura stat.
    S stat() pridobimo informacije o datoteki:
        int stat(const char *pathaname, struct stat *buf)
        int fstat(int fd, struct stat *bug) -> vzame fd, kar pomeni, da more biti datoteka odprta.
        int lstat(const char *pathname, struct stat *buf) -> podobno kot stat, vendar da dela za simbolične povezave.
        Sicer vrne -1 kar pomeni napaka.
        struct stat {
            mode_t st_mode; // tip datoteke in mode (dovoljenja)
            ino_t st_ino; // številka i-node
            dev_t st_dev; // št. naprave (datotečni sistem)
            dev_t st_rdev; // št. naprave za posebne datoteke
            nlink_t st_nlink; // št. povezav (links)
            uid_t st_uid; // uid lastnika
            gid_t st_gid; // gid lastnika
            off_t st_size; // velikost v bajtih (za običajne dat.)
            time_t st_atim; // čas zadnjega dostopa
            time_t st_mtim; // čas zadnje modifikacije
            time_t st_ctim; // čas zadnje spremembe statusa dat.
            blksize_t st_blksize; // najprimernejša velikost I/O bloka
            blkcnt_t st_blocks; // št. alociranih 512-bajtnih blokov
        }

Tipi datotek:
    Posebne datoteke -> za gonilnike naprav
    FIFO -> datoteka za medprocesno komunikacijo (v resnici ni datoteka, ampak strutura v pomn.).
    Vtičnica (socket) -> omrežna povezava.
    Simbolična povezava -> datoteka, ki vsebuje pot do neke druge datoteke (kakor bljižnica).
    Tip datoteke je zakodiran v st_mode (del strukture stat):
        • S_ISREG -> ali je regularna datoteka
        • S_ISDIR -> ali je direktoriji
        • S_ISCHR -> character device (znakovna naprava)
        • S_ISBLK -> bločna naprava
        • S_ISFIFO -> FIFO
        • S_ISLNK -> ali je simbolična povezava
        • S_ISSOCK -> ali je omrežna povezava

Uporabniki in skupine:
    Vsak uporabnika ima svoj user ID (neka številka).
    super user ima to število 0.
    Uporabnik je lahko član več skupin.
    Realni UID pove, kdo smo v resnici
    Efektivni ID določa dovoljenja dostopa do datotek (tole je odvisno od tega, kdo je lastnik datoteke; npr. poženeš datoteko od super
    user-ja, dobiš za to datoteko njegove pravice, ampak sam za to datoteko in nič drugega.)
    Izvšljiva datoteka mora imeti posebno zastatico (ta se vidi na poziciji x). Če je Set-User-ID postavljen, potem pomeni
    da gre tudi za izvršljivo datoteko (program).

Dovoljenja za dostop do datotek:
    user   group  others (ugo)
     rwx    rwx    rwx
    Obstaja 9 “dovolilnih” bitov za dostop do datotek,
    razdeljenih v 3 skupine (<sys/stat.h>)
        • S_IRUSR user-read     0400 r--------
        • S_IWUSR user-write    0200 -w-------
        • S_IXUSR user-execute  0100 --x------
        • S_IRGRP group-read    0040 ---r-----
        • S_IWGRP group-write   0020 ----w----
        • S_IXGRP group-execute 0010 -----x---
        • S_IROTH other-read    0004 ------r--
        • S_IWOTH other-write   0002 -------w-
        • S_IXOTH other-execute 0001 --------x
    • Definirane so tudi konstante
        • S_IRWXU 0700 rwx------
        • S_IRWXG 0070 ---rwx---
        • S_IRWXO 0007 ------rwx

Funkcija umask:
    Določa masko za "mode" pri ustvarjanju novih datotek
    mode_t umask(mode_t cmask);
    umask(0) -> nastavim masko 0 (nobenega bita ne prepovemo - vse je dolovoljeno).
    umask(0066) -> preproveduje vse pravice za group in other.