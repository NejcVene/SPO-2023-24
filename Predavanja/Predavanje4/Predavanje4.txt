Funkcija stat:
    Opiše v posebno strukturo informacije o datoteki.
    Tej funkicji podamo kazalec na to strukturo, ki
    jo moramo imeti prej že kreirano.

Funkciji mkdir & rmdir:
    Že po imenu lahko skepamo kaj delata.

Branje direktorijev:
    Uporabimo opendir(const char* pathName)
    Vrne kazalec na posebno strukturo, ki se imenuje DIR.
    DIR *opendir(const char* pathName)
    NULL pointer vrne, če kaj ni vredu.

    Za branje imamo readdir(DIR *dp (to je tisto, kar vrne opendir)).
    Vrne kazalec na struct dirent <-- to je vsebina direktorija.
    Bere toliko časa dokler ne pride do konca.
    Ko pride do konca vrne NULL, ali če je napaka.

    Poznamo tudi closedir(DIR *dp (tisto kar vrne opendir))
    Vrne int, pri čemer je 0 OK, -1 pa napaka.

    struct dirent {
        ino_t d_ino; // št. i-node
        char d_name[NAME_MAX+1]; // ime datoteke
    };
    d_ino je iNode number
    d_name je pa 
    NAME_MAX je sistemsko odvisna dolžina imena (ponavadi je 255).
    Če nas zanima podrobnejše zadeve, kličemo potem stat.

Kako vemo, da gre za navadno datoteko in ne npr. direktorij?
    Uporabimo makro S_ISREG

Posebne datoteke naprav:
    Vsak datotekčni sistem im število naprave major in minor.
    dev_t -> 12 (major) + 20 (minor)
                 ^glavno število  ^ pomožno število
    Zakodirani sta v tipu dev_t

Če želimo imeti konsisteno med diskom in bufferjem potrebujemo
oz. uporabimo sync. To je se vidi pri tem, da je pametno
USB ejectat, ker ga tako prisilimo, da zapiše vse zadeve
iz buferjev na disk oz. USB, ki jih morda še ni.
To torej uporabimo, da se buffer in V/I naprava uskladita.

============================================================================

Standardna V/I knjižnica
V/I buffer je del predpomnilnika (kernel buffer).
Ni rečeno, da se zadeve takoj zapišejo v datoteko (lahko je, da moramo malo počakati).
Zavedati se moramo, da je sistemski klic hitrejši od operacije na disku.
Tudi SSD je še relativno počasen v primerjavi s sistemskim klicem.
Kako se klic sploh izvede:
    Jedro sproži neko past (interrupt). Pove se številka sistemskega klica.
    Jedo mora sprožiti past, preveriti parametre, izvesti kopiranje v buffer ...
    Dejanski čas operacije je lahko dosti daljši.
    Želimo si, da je število sistemskih klicov čim manjše, da pohitrimo celotno zadevo.

Kako velikost bufferja vpliva na število sistemskih klicev:
    BUFSIZE     ČAS     SIS. KLICI
        1       8s      2M
        10      0.8s    200K
        100     0.15s   20K
        1000    0.028   20K
        10000   0.12    cca. 200

dd je convert and copy a file
dd  if (input_file) = /dev/zero
of (output_file) = bigfile.txt
count = 1024
bSize = 1024

To knjižnico določa standart ISO C
Knjižnica <stdio.h> ne uporablja opisnikov, amprak strani (streams).
Stream se pa nanaša na nek deskriptor.
Standardi tokovi:
    STD_IN
    STD_OUT
    STD_ERR
    ^ tole so kazalci na nek stream.
Funkcija fopen vrne kazalec na strukturo datoteke.
    FILE *fopen;
    Ta FILE struktura vsebuje:
        - fd,
        - podatki o bufferju (ta se pa uporablja za to, da je čim manj sistemskih klicov).
    Uporabnik te strukture ne uporablja sam, ampak do nje dostopa
    preko različnih funkcij.
Sistemski klici so nebufferirani, medtem funkcije kot so printf in podobne
pa so bufferirane. Namen tega je, da je delovanje hitrešje.

Imamo tri vrste medpomnjenja:
    - polno medpomnenje --> V/I operacije se izvede takrat, ko je buffer poln.
    - vrstično medpomnjenje --> ko pride \n se ta izprazne (flush)
    - brez medpomnenja --> stderr stream je običajno nebufferiran, zato da se sporočilo o napaki
      peikaže čim hitreje.

Odpiranje toka:
    FILE *fopen(cosnt char* path, const char* type)
    Vrne kazalec na datoteko, če je uspešen.
    NULL če pride do napake.
    Oba parametra sta niza.
    Type vzame naslednje parametre:
        • r: odpri za branje (read)
            • O_RDONLY (isto kot tole)
        • w: reži na velikost 0 ali ustvari za pisanje (write)
            • O_WRONLY | O_CREAT | O_TRUNC
        • a: odpri za pisanje na koncu datoteke (append) ali ustvari za pisanje
            • O_WRONLY | O_CREAT | O_APPEND
        • r+: odpri za branje in pisanje
            • O_RDWR
        • w+: reži na 0 ali ustvari za branje in pisanje
            • O_RDWR | O_CREAT | O_TRUNC
        • a+: odpri ali ustvari za branje in pisanje na koncu datoteke
            • O_RDWR | O_CREAT | O_APPEND

Datoteko zapremo s fclose:
    int fclose(FILE *fp (tist kar fopen vrne))
    Vrne 0 če je OK, -1 za napako.

Branje in pisanje toka:
    Ko odpremo tok, lahko izbiramo med 3 tipi
    neformatiranega V/I.
    • znakovni V/I (getc, fgetc, getchar, putc, fputc, putchar)
        • po en znak naenkrat
    • vrstični V/I (fgets, fputs)
        • po ena vrstica naenkrat
    • direktni V/I (fread, fwrite)
        • običajno za binarne datoteke

Formatiran V/I:
    - Izhod:
        • printf
        • fprintf
        • (sprintf) --> izpiše v string, ne pa na izhod
    - Vhod:
        • scanf
        • fscanf
        • sscanf

getc je MAKRO, fgetc() je pa funkcija.
getchar je definiran kot getc(stdin)
Če pride do napake lahko uporabimo:
    getc, fgetc, getchar vrnejo EOF tudi ob napaki.
    Če nas zanima vrsta
    napake, imamo na voljo:
        - int ferror(FILE *fp)
        - int feof(FILE *fp);

#include <stdio.h>
int putc(int c, FILE *fp);
int fputc(int c, FILE *fp);
int putchar(int c);
Vse tri vrnejo c ob uspehu, EOF ob napaki
putchar je fputs(stdout)

Vrstične vhodne funkcije:
    char *fgets(char *buf, int n, FILE *fp);
    ^ n pove koliko je velik buffer
    char *gets(char *buf);
    ^ tukaj pa ne povemo koliko je velikost bufferja in tudi NE bo vrnil napake of buffer overflow!
    Obe vrneta buf, če OK, in NULL ob koncu datoteke ali ob napaki.

Vrstične izhodne funkcije:
    int fputs(const char *str, FILE *fp);
    int puts(const char *str);
    Vrneta nenegativno vrednost, če OK, sicer EOF


