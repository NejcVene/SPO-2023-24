Funkcija stat:
    Opiše v posebno strukturo informacije o datoteki.
    Tej funkicji podamo kazalec na to strukturo, ki
    jo moramo imeti prej že kreirano.

Funkciji mkdir & rmdir:
    Že po imenu lahko skepamo kaj delata.

Branje direktorijev:
    Uporabimo opendir(const char* pathName)
    Vrne kazalec na posebno strukturo, ki se imenuje DIR.
    DIR *opendir(const char* pathName)
    NULL pointer vrne, če kaj ni vredu.

    Za branje imamo readdir(DIR *dp (to je tisto, kar vrne opendir)).
    Vrne kazalec na struct dirent <-- to je vsebina direktorija.
    Bere toliko časa dokler ne pride do konca.
    Ko pride do konca vrne NULL, ali če je napaka.

    Poznamo tudi closedir(DIR *dp (tisto kar vrne opendir))
    Vrne int, pri čemer je 0 OK, -1 pa napaka.

    struct dirent {
        ino_t d_ino; // št. i-node
        char d_name[NAME_MAX+1]; // ime datoteke
    };
    d_ino je iNode number
    d_name je pa 
    NAME_MAX je sistemsko odvisna dolžina imena (ponavadi je 255).
    Če nas zanima podrobnejše zadeve, kličemo potem stat.

Kako vemo, da gre za navadno datoteko in ne npr. direktorij?
    Uporabimo makro S_ISREG

Posebne datoteke naprav:
    Vsak datotekčni sistem im število naprave major in minor.
    dev_t -> 12 (major) + 20 (minor)
                 ^glavno število  ^ pomožno število
    Zakodirani sta v tipu dev_t

Če želimo imeti konsisteno med diskom in bufferjem potrebujemo
oz. uporabimo sync. To je se vidi pri tem, da je pametno
USB ejectat, ker ga tako prisilimo, da zapiše vse zadeve
iz buferjev na disk oz. USB, ki jih morda še ni.
To torej uporabimo, da se buffer in V/I naprava uskladita.

============================================================================

Standardna V/I knjižnica
V/I buffer je del predpomnilnika (kernel buffer).
Ni rečeno, da se zadeve takoj zapišejo v datoteko (lahko je, da moramo malo počakati).
Zavedati se moramo, da je sistemski klic hitrejši od operacije na disku.
Tudi SSD je še relativno počasen v primerjavi s sistemskim klicem.
Kako se klic sploh izvede:
    Jedro sproži neko past (interrupt). Pove se številka sistemskega klica.
    Jedo mora sprožiti past, preveriti parametre, izvesti kopiranje v buffer ...
    Dejanski čas operacije je lahko dosti daljši.
    Želimo si, da je število sistemskih klicov čim manjše, da pohitrimo celotno zadevo.

Kako velikost bufferja vpliva na število sistemskih klicev:
    
 