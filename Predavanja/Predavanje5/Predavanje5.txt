Določitev tipa bufferiranja:
    - void setbuf(FILE *fp (kazalec na tok),
                  char *buf (kazalec na nek buffer, ki že obstaja)
                 );
        To funkcijo kličemo, ko je npr. datoteka, torej tok
        že odprt. Kliče se za fopen().
        S tem lahko vklopimo ali izklopimo bufferiranje, če mu damo NULL pointer (za char *buf).
        Izključimo ga lahko npr. pri pisanju v datoteko brez bufferiranja.
    - int setvbuf(FILE *fp,
                  char *buf,
                  int mode,
                  size_t size);
        S setvbuf lahko določimo tudi tip bufferiranja. Argument mode:
            • _IOFBF polno (čaka, dokler se buffer ne napolni do konca)
            • _IOLBF linijsko (čaka, dokler se ne pojavi new line "\n")
            • _IONBF nebufferirano (nič ne čaka, ampak kar preda na izhod)

Za izplakovanje tokova lahko uporabimo:
    int fflush(FILE *fp);
    • Ta funkcija povzroči, da se vsi še nezapisani podatki za
        tok predajo jedru
    • Če je fp enako NULL, se vsi izhodni tokovi izplaknejo!
    Če je vse OK vrne 0, sicer EOF (-1) ob napaki.

setvbuf(stdout, buf, _IOFBF (full buffering), sizeof(buf) (velikost bufferja));
printf("He"); // izpiše "He" na stdout
fflush(stdout);
setvbuf(stdout, NULL, _IONBF, 0); // iključimo bufferiranje
printf("llo w");
Kot rezultat tega programa dobimo:

Formatiran vhod:
    scanf:
        - int x;
        - int scanf("%d", &x);
    fscanf:
        - int fscanf( FILE *fp, const char *format, ...);
    sscanf:
        - int sscanf(const char *buf, const char *format, ...);
    Vse tri vrnejo število prebranih stvari, ter EOF ob napaki ali koncu
    datoteke.

=================================================================================

Procesi:
    Proces je primerek programa, ki se izvaja. Poleg binarne slike programa
    ima tudi informacine o npr. odprtih datotekah, kdo je lastnih procesa ...
    Proces je lahko iz ene ali več niti. Nit je enota procesa, ki se samostojno izvaja.
    Proces ima lahko eno ali več niti. S nitmi upravlja scheduler (poseben program).
    Ko je konec progama oz. procesa se ga odstrani.
    Vsak proces ima svojo števiko, in sicer PID (process ID).
    Obstajajo posebni procesi:
        • PID 0: razvrščevalnik, swapper (sistemski proces znotraj jedra)
        • PID 1: init (uporabniški proces s pravicami superuserja)
        • PID 2: pagedeamon (proces jedra)
    Poleg PID ima proces tudi druge identifikatorje:
        • User ID, group ID.

Funkcija, ki vrne PID je:
    - pid_t getpid(void);
      Vrne svoj PID.
    - pid_t getppid(void);
      Vrne PID od starša.
    - uid_t getuid(void);
      Vrne ID od uporabnika, kateremu ta proces pripada.

Funkcija fork:
    - Je edini način, ki nam omogoča kreiranja novega procesa, torej proces ustvari
      dodaten proces.
    - pid_t fork(void);
    - Ko se ta funkcija izvede, nastane še en proces, ki je koija tega, ki ga je ustvaril (ima seveda drugačen PID).
    - Ta PID, ki ga vrne; 0 v otroku; PID ima otroka v staršu; -1 ob napaki.
    Primer:
        pid = fork();
        if (pid < 0) {
            err()
        } else if (pid == 0) {
            koda otroka
        } else {
            koda starša
        }
        Kodo tu naprej po default izvajata oba procesa (če si pa to želimo, je pa odvisno).
    - starš ima lahko več otrok, vendar otrok ima lahko samo enega starša.
    - Otrok se izveja od klica fork() funckije naprej.

Otrok podeduje veliko zadev, ena od teh so odprte datoteke starša, torej njihove FD-je:
    • Pomembno je, da si starš in otrok delita isti odmik
    (offset)
    • Če otrok piše v neko datoteko, se tudi staršu spremeni
    odmik
    • Obstajata 2 metodi upravljanja z opisniki po klicu fork
        • starš čaka na otroka, da konča (uporabimo npr. sleep - to je najenostavnejše).
        • starš in otrok gresta vsak po svoje. Po forku oba zapreta
            opisnike, ki jih ne rabita. Tako ni zmešnjave. Tako običajno
            delajo omrežni strežniki.
Obstajata dve uporabi forka:
    - kreiranje novega procesa (dupliciranje starša)
    - kadar želi proces izvršiti drug program -> naredimo otroka, da ta izvaja
      drugi program iz diska. To naredimo s uporabo exec().
      V drugih sistemih je to "spawn".

Funkcija vfork:
    - narejen v tem smislu, da ne podeduje reči od starše, ker bo izvajal drugi
      program in bi bilo nesmisleno podedovati reči, ki jih ne potrebujemo.
    - Hkrati jamči, da otrok teče prvi (dokler ne kliče exec ali exit, tedaj tudi starš nadaljuje).
    - imamo razliko pri exit(), in sicer ta bo izplaknil buffer, _exit() pa tega NE BO naredil.

Funkcije exit:
    - So 3 načini normalnega končanja procesa in 2
      načina nenormalnega končanja procesa.
    - Normalno končanje:
        • return iz funkcije main (isto kot če kličemo exit)
        • klic funkcije exit. To vključuje klic exit handlerjev, ki so
          bili registrirani z atexit, in zapiranje std. V/I tokov.
        • _exit (sistemski klic)
    - Nenormalno končanje:
        • klic abort (generira signal SIGABRT)
        • ko proces prejme določene signale

Ko se otrok konča, je to tem potrebno obvestiti starša. Otrok ima nek
status končanja (neko število), ki ga starš dobi s klicanje funkcije wait().
Če se starš konča prej od otroka, ta ne more več obvstiti starša, zato dobi "skrbnika", in sicer
proces init (novejše verzije Linux-a uporabio "subreaper").
Možno je tudi to, da starš ni bil obveščen o zaključku otroka -> tako dobimo zombi proces, zato ker
ta zaseda sistemske vire, kljub temu, da se ne izvaja več.

Funkciji wait in waitpid:
    - Ko se proces konča, jedro pošlje njegovemu staršu signal SIGCHLD.
    • Starš lahko ta signal ignorira, ali pa uporabi nek
      obdelovalnik signala (signal “handler”)
    • Če proces kliče wait, ker je prejel signal SIGCHLD, wait
      vrne takoj
    • Če wait kličemo ob naključnem času, lahko blokira
    #include <sys/wait.h>
    pid_t wait(int *statloc);
    pid_t waitpid(pid_t pid, int *statloc, int options);
    Vrneta proc. ID otroka, če OK, in -1 ob napaki.
    • Če je otrok zombie, se wait takoj vrne z njegovim statusom
    • Termination status se vpiše, kamor kaže kazalec statloc
    • Termination status se ignorira, če je statloc NULL
    • Termination status je bitno zakodiran

    V <sys/wait.h> so definirani trije makroji:
        • WIFEXITED(status <- to je statloc kazalec): true, če je otrok končal normalno
        • WIFSIGNALED(status <- to je statloc kazalec): true, če je otrok končal nenormalno
        • WIFSTOPPED(status <- to je statloc kazalec): true, če je otrok trenutno ustavljen
    Funkcija pr_exit uporablja te makroje za izpis
    termination statusa.

    Trije primeri končanja otroka:
        - otrok kliče exit(7) -> starš dobi številko 7
        - otrok kliče abort() -> to generira signal SIGABRT
        - otrok deli status s 0 -> to generira signal SIGFPE

Funkcije exec:
    - Nadomesti otroški proces s programom iz diska.
    - Imamo 6 različic:
        - l -> lista argumentov
        - v -> vektor (array) argumentov
        - p -> path (pot)
        - e -> okolje (evironment)

Funkcija system:
    - znotraj programa izvedemo ukaz, kot da bi ga napisali v lupino (shell)
    - int system(const char *cmdstring);
    - je vmesnik na shell in ne na OS.
    - system je implementiran s klici funkcij fork, exec in waitpid.
    - Če gre za napako lahko vrne -1, 127 (če exec ne uspe).

