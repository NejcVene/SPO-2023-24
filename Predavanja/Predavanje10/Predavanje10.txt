EINTR
    To je prekinjen sistemski klic. To tega pogosto
    pride pri spletnih aplikacijah.
    Kaj narediti, če pride to tega? Samo še enkrat poženi to.

TIME_WAIT
    Stanje, kjer strežnik čaka nekega odjemalca.
    Čez nekaj časa se tudi ta samodejno zaključi.
    (Ta stanje vidimo v diagramu prehajanja stanj za TCP).

Ukaz ps -al nam pokaže stanje procesov npr. če je zombi proces bo izpsal Z.

Bind error
    To se lahko naredi pri zagonu strežnika.
    Razlog za to je (običajno) ta, da je po končanju povezave strežnik še
    nekaj časa v stanju TIME_WAIT.
    To popravimo s funkcijo, ki nam omogoča da uporabimo enaka vrata.

======================================================================================

Gonilniki - Moduli
    Model je ime za kodo, ki se v Linuxu izvaja in jo damo v jedro med izvajanjem.
    To pomeni, da jedra ni potrebo re-compilat.

Kaj je gonilnik:
    Je program, ki upravlja s HW napravami preko dobro definiranega
    programskega vmesnika. Torej je SW plast med aplikacijo in napravo.
    Razvoj gonilinika je neodvisna od jedra (ni ga potrebno npr. ustaviti).

Jedro
    "Velik program"
    Veliko število procesov.
    Kernel je kos kode, ki ureja zadeve za procese (npr. vire)
    Torej naloge so:
        - kreiranje procesa
        - upravlajnje s procesi
        - upravlajnje s pomnilnikom
        - datotečni sistemi
        - nadzor nad napravami
        - omrežje

Moduli
    Vsak modul je iz objektne kode (ni exe).
    Da jih damo v kernel uporabimo insmod (insert modul).
    rmmod pa ga odstrani iz jedra.
    3-je tipi naprav in modulov:
        - bločni
          npr. USB
        - omrežni
          Naprava, ki je možna izmenjave podatkov z drugimi gostitelji.
        - znakovni
          Najenostavnejši
          ttyS0 -> seriski port (kakor COM1 pri WIN).
          Dostopne kot tok bajtov (kakor datoteka).
          Dostop preko posebnih datoteka za znakovne naprave.
          Večinoma je sekvenčni dostop do podatkov.

Varnost
    V jedro lahko nalaga module samo superuser.

Ni fuknije main(), ampak je ena vhoda pa ena izhoda funkcija.
Funkcije uporabljajo static s namenom, da so vidne samo znotraj
modula.
Makro module_init() -> kot paramenter podamo ime vhodne/init funkcije.
Makro module_exit() -> kot paramenter podamo ime izhodne/končne funkcije.

printk() namesto printf(), ker v kernelu ta ni dostopa (user knjižnic
v kernelu NI).
printk() izhod gre na log buffer jedra (var/log/messages). Tist kar bo
izpisal lahko vidimo s ukazom dmesg.
Moduli nimajo običajni header datotek.
Če pride do segmentation fault je tukaj veliko bolj nevarna.
Jedro ima majhen sklad (cca. 4KB)
Nimamo aritmetike s plavajočo vejco.

uname -r pove katero verzijo jedra imamo.

Obravnava napak med init
    Vsaka registracija lahko spodleti.
    Ker je npr. premalo pomnilnika
    Če se modul ne naloži, je treba preklicati vse opravljene registracije.

Če mamo kake kazalce, dajmo te inicializirati s NULL (to je s namenom, da vemo, če obstaja).

Parametri modula
    So možni.

Obstajajo tudi moduli, ki ne grejo v jedro. Ti so po navadi narejeni kot
strežniki. Prednost tega je, da lahko uporabimo celotno C knjižnico,
boljše debugganje, uporaba virtualnega pomnilnika.
Slabost je, da v user-space ni preknitev, neposreden dostop do pomnilnika
je lahko težave, context switch med procesi je bolj počasen.

Znakovni gonilnik
    4 komponete:
        - aplikacija
        - posebna datoteka naprave
        - gonilnik
        - naprava
    
